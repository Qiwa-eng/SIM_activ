import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

# Load configuration from environment
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@example_channel")
CHANNEL_LINK = os.getenv("CHANNEL_LINK", "https://t.me/example_channel")

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

async def is_subscribed(user_id: int) -> bool:
    """Check if the user is subscribed to the channel."""
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status != "left"
    except Exception:
        # In case of any error consider user as not subscribed
        return False

def subscribe_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK),
        InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_sub"),
    )
    return keyboard

def main_menu() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton("üì± –ü–æ–ø–æ–ª–Ω–∏—Ç—å –°–ò–ú", callback_data="topup_sim"),
        InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance"),
        InlineKeyboardButton("üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã", callback_data="rates"),
    )
    return keyboard

def main_menu_text(user_name: str) -> str:
    return f"<b>üëã {user_name}</b>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>¬´–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞¬ª</b>"

def back_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    )

async def send_welcome(message: types.Message) -> None:
    user_name = message.from_user.full_name
    await message.answer(
        main_menu_text(user_name),
        reply_markup=main_menu(),
    )

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    if await is_subscribed(message.from_user.id):
        await send_welcome(message)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É —Å–æ –≤—Å–µ–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
            reply_markup=subscribe_keyboard(),
        )

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def callback_check(callback_query: types.CallbackQuery):
    if await is_subscribed(callback_query.from_user.id):
        await bot.answer_callback_query(callback_query.id)
        await send_welcome(callback_query.message)
    else:
        await bot.answer_callback_query(callback_query.id)
        await callback_query.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=subscribe_keyboard(),
        )

@dp.callback_query_handler(lambda c: c.data == "profile")
async def my_profile(callback_query: types.CallbackQuery):
    if not await is_subscribed(callback_query.from_user.id):
        await callback_query.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=subscribe_keyboard(),
        )
        return

    purchase_sum = 0  # Placeholder for purchase sum
    username = (
        f"@{callback_query.from_user.username}"
        if callback_query.from_user.username
        else "–Ω–µ –∑–∞–¥–∞–Ω"
    )
    text = (
        "<b>üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"<b>ID:</b> {callback_query.from_user.id}\n"
        f"<b>Username:</b> {username}\n"
        f"<b>–°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {purchase_sum}"
    )
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üì¶ –ê—Ä—Ö–∏–≤ –ø–æ–∫—É–ø–æ–∫", callback_data="purchase_history"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"),
    )
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data in [
    "topup_sim",
    "topup_balance",
    "rates",
])
async def stub_features(callback_query: types.CallbackQuery):
    if not await is_subscribed(callback_query.from_user.id):
        await callback_query.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=subscribe_keyboard(),
        )
        return

    if callback_query.data == "topup_sim":
        reply = "üì± <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –°–ò–ú</b>\n–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ."
    elif callback_query.data == "topup_balance":
        reply = "üí∞ <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ."
    else:
        reply = "üìà <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã</b>\n–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ."

    kb = back_keyboard()
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(reply, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "purchase_history")
async def purchase_history(callback_query: types.CallbackQuery):
    if not await is_subscribed(callback_query.from_user.id):
        await callback_query.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=subscribe_keyboard(),
        )
        return
    kb = back_keyboard()
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text("–ê—Ä—Ö–∏–≤ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "back")
async def back_to_menu(callback_query: types.CallbackQuery):
    if not await is_subscribed(callback_query.from_user.id):
        await callback_query.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=subscribe_keyboard(),
        )
        return
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(
        main_menu_text(callback_query.from_user.full_name),
        reply_markup=main_menu(),
    )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
