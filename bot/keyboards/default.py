"""Inline keyboards used across the bot.

Previously this module constructed ReplyKeyboardMarkup and sent them as
persistent reply keyboards. To make buttons attached to messages we now
use inline keyboards built with InlineKeyboardBuilder.
"""

from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder


def main_keyboard() -> InlineKeyboardMarkup:
    """Create main menu inline keyboard."""

    builder = InlineKeyboardBuilder()
    builder.button(text="üìå –í—ã—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="post_ad")
    builder.button(text="üì∞ –û–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="ads")
    builder.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    builder.button(text="‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è", callback_data="reputation")
    builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    builder.adjust(1)
    return builder.as_markup()


def ads_keyboard() -> InlineKeyboardMarkup:
    """Keyboard for the "–û–±—ä—è–≤–ª–µ–Ω–∏—è" section."""

    builder = InlineKeyboardBuilder()
    builder.button(text="üì∞ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="all_ads")
    builder.button(text="üîé –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", callback_data="search_ads")
    builder.button(text="üîî –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_ads")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()


def profile_keyboard() -> InlineKeyboardMarkup:
    """Keyboard for the "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" section."""

    builder = InlineKeyboardBuilder()
    builder.button(text="‚≠ê –†–µ–ø—É—Ç–∞—Ü–∏—è", callback_data="rep")
    builder.button(text="üë§ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="settings")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()


def reputation_keyboard() -> InlineKeyboardMarkup:
    """Keyboard for the "–†–µ–ø—É—Ç–∞—Ü–∏—è" section."""

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")
    builder.button(text="üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="top_users")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()


def help_keyboard() -> InlineKeyboardMarkup:
    """Keyboard for the "–ü–æ–º–æ—â—å" section."""

    builder = InlineKeyboardBuilder()
    builder.button(text="üìñ –ü—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏", callback_data="rules")
    builder.button(text="‚ùì FAQ", callback_data="faq")
    builder.button(text="üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()


def ads_list_keyboard(ads: list[dict]) -> InlineKeyboardMarkup:
    """Build keyboard with buttons for each advertisement."""

    builder = InlineKeyboardBuilder()
    for ad in ads:
        builder.button(text=ad["title"], callback_data=f"view_ad:{ad['id']}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()


def ad_view_keyboard(ad: dict, viewer_id: int) -> InlineKeyboardMarkup:
    """Keyboard for a single advertisement with contact and edit options."""

    builder = InlineKeyboardBuilder()
    url = (
        f"https://t.me/{ad['user_name']}" if ad.get("user_name") else f"tg://user?id={ad['user_id']}"
    )
    builder.button(text="üìû –°–≤—è–∑—å", url=url)
    if ad["user_id"] == viewer_id:
        builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_ad:{ad['id']}")
    builder.adjust(1)
    return builder.as_markup()


def ad_settings_keyboard(ad: dict) -> InlineKeyboardMarkup:
    """Keyboard for ad creation/editing settings."""

    builder = InlineKeyboardBuilder()
    builder.button(
        text=("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ" if ad.get("title") else "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"),
        callback_data="ad_set:title",
    )
    builder.button(
        text=("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ" if ad.get("text") else "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"),
        callback_data="ad_set:text",
    )
    builder.button(
        text=("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≥–∏—Ñ" if ad.get("photo") else "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≥–∏—Ñ"),
        callback_data="ad_set:photo",
    )
    builder.button(
        text=("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏" if ad.get("tags") else "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏"),
        callback_data="ad_set:tags",
    )
    show_name = ad.get("show_name", True)
    builder.button(
        text=f"–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —é–∑–µ—Ä–Ω–µ–π–º: {'–î–∞' if show_name else '–ù–µ—Ç'}",
        callback_data="ad_toggle_name",
    )
    builder.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="ad_publish")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="ad_cancel")
    builder.adjust(1)
    return builder.as_markup()
